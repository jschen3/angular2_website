{"version":3,"file":"dropdown.directive.js","sourceRoot":"","sources":["../../src/dropdown/dropdown.directive.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:max-file-line-count */\nimport {\n  ChangeDetectorRef, Directive, ElementRef, EventEmitter, HostBinding, Input, OnDestroy, OnInit, Output\n} from '@angular/core';\n\nimport { isBs3 } from '../utils/ng2-bootstrap-config';\nimport { dropdownService } from './dropdown.service';\nimport { DropdownConfig } from './dropdown.config';\n\n/**\n * Mark dropdown content with this directive\n */\n\nexport class DropdownDirective implements OnInit, OnDestroy {\n  /** if `true` dropdown will be opened */\n  \n  \n  \n  public get isOpen(): boolean {\n    return this._isOpen;\n  }\n\n  public set isOpen(value: boolean) {\n    this._isOpen = !!value;\n\n    // todo: implement after porting position\n    // if (this.appendToBody && this.menuEl) {\n    //\n    // }\n\n    // todo: $animate open<->close transitions, as soon as ng2Animate will be\n    // ready\n    if (this.isOpen) {\n      this.focusToggleElement();\n      dropdownService.open(this);\n    } else {\n      dropdownService.close(this);\n      this.selectedOption = void 0;\n    }\n    this.onToggle.emit(this.isOpen);\n    this.isOpenChange.emit(this.isOpen);\n    this._changeDetector.markForCheck();\n    // todo: implement call to setIsOpen if set and function\n  }\n\n  /** behaviour vary:\n   * - nonInput - (default) automatically closes the dropdown when any of its elements is clicked â€” as long as the clicked element is not an input or a textarea.\n   * - always - automatically closes the dropdown when any of its elements is clicked\n   * - outsideClick - closes the dropdown automatically only when the user clicks any element outside the dropdown\n   * - disabled - disables the auto close. You can then control the open/close status of the dropdown manually, by using is-open. Please notice that the dropdown will still close if the toggle is clicked, the esc key is pressed or another dropdown is open\n   */\n   public autoClose: string;\n  /** if true will enable navigation of dropdown list elements with the arrow keys */\n   public keyboardNav: boolean;\n  // enum string: ['always', 'outsideClick', 'disabled']\n  /** Allows to attach dropdown to body, will be replaced with container=\"body\" */\n   public appendToBody: boolean;\n\n  /** fired when dropdown toggles, $event:boolean equals dropdown isOpen state */\n   public onToggle: EventEmitter<boolean> = new EventEmitter<boolean>(false);\n  /** fired when isOpen value changes */\n   public isOpenChange: EventEmitter<boolean> = new EventEmitter<boolean>(false);\n   public addClass: boolean = true;\n\n  public get isBs3(): boolean {\n    return isBs3();\n  }\n\n  // index of selected element\n  public selectedOption: number;\n  // drop menu html\n  public menuEl: ElementRef;\n  // drop down toggle element\n  public toggleEl: ElementRef;\n  public el: ElementRef;\n  protected _isOpen: boolean;\n\n  protected _changeDetector: ChangeDetectorRef;\n\n  public constructor(el: ElementRef, ref: ChangeDetectorRef, config: DropdownConfig) {\n    // @Query('dropdownMenu', {descendants: false})\n    // dropdownMenuList:QueryList<ElementRef>) {\n    this.el = el;\n    this._changeDetector = ref;\n    Object.assign(this, config);\n    // todo: bind to route change event\n  }\n\n  public ngOnInit(): void {\n    if (this.isOpen) {\n      // todo: watch for event get-isOpen?\n    }\n  }\n\n  public ngOnDestroy(): void {\n    if (this.appendToBody && this.menuEl) {\n      this.menuEl.nativeElement.remove();\n    }\n  }\n\n  public set dropDownMenu(dropdownMenu: { el: ElementRef }) {\n    // init drop down menu\n    this.menuEl = dropdownMenu.el;\n\n    if (this.appendToBody) {\n      window.document.body.appendChild(this.menuEl.nativeElement);\n    }\n  }\n\n  public set dropDownToggle(dropdownToggle: { el: ElementRef }) {\n    // init toggle element\n    this.toggleEl = dropdownToggle.el;\n  }\n\n  public show():void {\n    this.isOpen = true;\n  }\n\n  public hide():void {\n    this.isOpen = false;\n  }\n\n  public toggle(open?: boolean): boolean {\n    return this.isOpen = arguments.length ? !!open : !this.isOpen;\n  }\n\n  public focusDropdownEntry(keyCode: number): void {\n    // If append to body is used.\n    let hostEl = this.menuEl ?\n      this.menuEl.nativeElement :\n      this.el.nativeElement.getElementsByTagName('ul')[0];\n\n    if (!hostEl) {\n      // todo: throw exception?\n      return;\n    }\n\n    let elems = hostEl.getElementsByTagName('a');\n    if (!elems || !elems.length) {\n      // todo: throw exception?\n      return;\n    }\n\n    // todo: use parseInt to detect isNumber?\n    // todo: or implement selectedOption as a get\\set pair with parseInt on set\n    switch (keyCode) {\n      case (40):\n        if (typeof this.selectedOption !== 'number') {\n          this.selectedOption = 0;\n          break;\n        }\n\n        if (this.selectedOption === elems.length - 1) {\n          break;\n        }\n\n        this.selectedOption++;\n        break;\n      case (38):\n        if (typeof this.selectedOption !== 'number') {\n          return;\n        }\n\n        if (this.selectedOption === 0) {\n          // todo: return?\n          break;\n        }\n\n        this.selectedOption--;\n        break;\n      default:\n        break;\n    }\n\n    elems[this.selectedOption].focus();\n  }\n\n  public focusToggleElement(): void {\n    if (this.toggleEl) {\n      this.toggleEl.nativeElement.focus();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[dropdown]',\n  exportAs: 'bs-dropdown',\n  //tslint:disable-next-line\n  host: {'[class.show]': 'isOpen && !isBs3'}\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: DropdownConfig, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'isOpen': [{ type: HostBinding, args: ['class.open', ] },{ type: HostBinding, args: ['class.active', ] },{ type: Input },],\n'autoClose': [{ type: Input },],\n'keyboardNav': [{ type: Input },],\n'appendToBody': [{ type: Input },],\n'onToggle': [{ type: Output },],\n'isOpenChange': [{ type: Output },],\n'addClass': [{ type: HostBinding, args: ['class.dropdown', ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}